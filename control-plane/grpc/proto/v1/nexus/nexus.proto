syntax = "proto3";

import "v1/misc/common.proto";
import "google/protobuf/wrappers.proto";

package v1.nexus;

message Nexus {
  // id of the io-engine instance
  string node_id = 1;
  // name of the nexus
  string name = 2;
  // uuid of the nexus
  google.protobuf.StringValue uuid = 3;
  // size of the volume in bytes
  uint64 size = 4;
  // current status of the nexus
  NexusStatus status = 5;
  // array of children
  repeated Child children = 6;
  // URI of the device for the volume (missing if not published).
  // Missing property and empty string are treated the same.
  string device_uri = 7;
  // number of active rebuild jobs
  uint32 rebuilds = 8;
  // protocol used for exposing the nexus
  common.Protocol share = 9;
}

// Multiple nexus
message Nexuses {
  repeated Nexus nexuses = 1;
}

enum NexusStatus {
  // Default Unknown state
  Unknown = 0;
  // healthy and working
  Online = 1;
  // not healthy but is able to serve IO
  Degraded = 2;
  // broken and unable to serve IO
  Faulted = 3;
}

message Child {
  // uri of the child device
  string uri = 1;
  // state of the child
  ChildState state = 2;
  // current rebuild progress (%)
  optional uint32 rebuild_progress = 3;
}

enum ChildState {
  // Default Unknown state
  ChildUnknown = 0;
  // healthy and contains the latest bits
  ChildOnline = 1;
  // rebuild is in progress (or other recoverable error)
  ChildDegraded = 2;
  // unrecoverable error (control plane must act)
  ChildFaulted = 3;
}

message NexusSpec {
  // Nexus Id
  google.protobuf.StringValue nexus_id = 1;
  // Name of the nexus
  string name = 2;
  // Node where the nexus should live.
  string node_id = 3;
  // List of children.
  repeated NexusChild children = 4;
  // Size of the nexus.
  uint64 size = 5;
  // The status the nexus spec.
  common.SpecStatus spec_status = 6;
  // Share Protocol
  common.Protocol share = 7;
  // Managed by our control plane
  bool managed = 8;
  // Volume which owns this nexus, if any
  google.protobuf.StringValue owner = 9;
  // Record of the operation in progress
  optional common.SpecOperation operation = 10;
}

// Nexus children (replica or "raw" URI)
message NexusChild {
  oneof child {
    // When the child is a pool replica (in case of a volume)
    Replica replica = 1;
    // When the child is just a "raw" URI (could be anything)
    Uri uri = 2;
  }
}

// ReplicaUri used by managed nexus creation
// Includes the ReplicaId which is unique and allows us to pinpoint the exact replica
message Replica {
  google.protobuf.StringValue replica_id = 1;
  string ChildUri = 2;
}

// URI of a nexus child
message Uri {
  string ChildUri = 1;
}

// Get all nexuses based on the filter criteria
message GetNexusesRequest {
  oneof filter {
    common.NodeFilter node = 1;
    common.NodeNexusFilter node_nexus = 2;
    common.NexusFilter nexus = 3;
  }
}

// Reply type for a GetNexuses request
message GetNexusesReply {
  oneof reply {
    Nexuses nexuses = 1;
    common.ReplyError error = 2;
  }
}

message CreateNexusRequest {
  // id of the io-engine instance
  string node_id = 1;
  // the nexus uuid will be set to this
  google.protobuf.StringValue nexus_id = 2;
  // size of the device in bytes
  uint64 size = 3;
  // replica can be iscsi and nvmf remote targets or a local spdk bdev
  // (i.e. bdev:///name-of-the-bdev).
  // uris to the targets we connect to
  repeated NexusChild children = 4;
  // Managed by our control plane
  bool managed = 5;
  // Volume which owns this nexus, if any
  google.protobuf.StringValue owner = 6;
  // Nexus Nvmf Configuration
  optional NexusNvmfConfig config = 7;
}

// Nvmf Controller Id Range
// Ranges between 1 to 0xFFEF
message NvmfControllerIdRange {
  uint32 start = 1;
  uint32 end = 2;
}

// Nexus Nvmf Configuration
message NexusNvmfConfig {
  // limits the controller id range
  NvmfControllerIdRange controller_id_range = 1;
  // persistent reservation key
  uint64 reservation_key = 2;
  // preempts this reservation key
  optional uint64 preempt_reservation_key = 3;
}

// Reply type for CreateNexusRequest
message CreateNexusReply {
  oneof reply {
    Nexus nexus = 1;
    common.ReplyError error = 2;
  }
}

// Destroy Nexus Request
message DestroyNexusRequest {
  // id of the io-engine instance
  string node_id = 1;
  // uuid of the nexus
  google.protobuf.StringValue nexus_id = 2;
}

// Reply type for DestroyNexusRequest
message DestroyNexusReply {
  optional common.ReplyError error = 1;
}

// Share Nexus Request
message ShareNexusRequest {
  // id of the io-engine instance
  string node_id = 1;
  // uuid of the nexus
  google.protobuf.StringValue nexus_id = 2;
  // encryption key
  optional string key = 3;
  // share protocol
  NexusShareProtocol protocol = 4;
}

// Reply type for a ShareNexusRequest
message ShareNexusReply {
  oneof reply {
    string response = 1;
    common.ReplyError error = 2;
  }
}

// Unshare Nexus Request
message UnshareNexusRequest {
  // id of the io-engine instance
  string node_id = 1;
  // uuid of the nexus
  google.protobuf.StringValue nexus_id = 2;
}

// Reply type for a UnshareNexus request
message UnshareNexusReply {
  optional common.ReplyError error = 1;
}

// The protocol used to share the nexus.
enum NexusShareProtocol {
  // shared as NVMe-oF TCP
  Nvmf = 0;
  // shared as iSCSI
  Iscsi = 1;
}

// Add child to Nexus Request
message AddNexusChildRequest {
  // id of the io-engine instance
  string node_id = 1;
  // uuid of the nexus
  google.protobuf.StringValue nexus_id = 2;
  // URI of the child device to be added
  string uri = 3;
  // auto start rebuilding
  bool auto_rebuild = 4;
}

// Remove Child from Nexus Request
message RemoveNexusChildRequest {
  // id of the io-engine instance
  string node_id = 1;
  // uuid of the nexus
  google.protobuf.StringValue nexus_id = 2;
  // URI of the child device to be added
  string uri = 3;
}

// Reply type for a AddNexusChildRequest request
message AddNexusChildReply {
  oneof reply {
    Child child = 1;
    common.ReplyError error = 2;
  }
}

// Reply type for a RemoveNexusChildRequest request
message RemoveNexusChildReply {
  optional common.ReplyError error = 1;
}

// Nexus Grpc Service
service NexusGrpc {
  rpc GetNexuses (GetNexusesRequest) returns (GetNexusesReply) {}
  rpc CreateNexus (CreateNexusRequest) returns (CreateNexusReply) {}
  rpc DestroyNexus (DestroyNexusRequest) returns (DestroyNexusReply) {}
  rpc ShareNexus (ShareNexusRequest) returns (ShareNexusReply) {}
  rpc UnshareNexus (UnshareNexusRequest) returns (UnshareNexusReply) {}
  rpc AddNexusChild (AddNexusChildRequest) returns (AddNexusChildReply) {}
  rpc RemoveNexusChild (RemoveNexusChildRequest) returns (RemoveNexusChildReply) {}
}
